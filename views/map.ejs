<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pothole Detection Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"/>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #1a1a1a;
            color: #ffffff;
            font-family: Arial, sans-serif;
        }

        .dashboard-container {
            display: grid;
            grid-template-columns: 350px 1fr;
            height: 100vh;
        }

        .sidebar {
            padding: 20px;
            background-color: #2d2d2d;
            overflow-y: auto;
        }

        .stats-container {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #3d3d3d;
            border-radius: 8px;
        }

        .map-container {
            height: 100%;
            position: relative;
        }

        #map {
            height: 100%;
            width: 100%;
        }

        .stats-heading {
            font-size: 1.2em;
            margin-bottom: 10px;
            color: #4a9eff;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .refresh-button {
            background: none;
            border: none;
            color: #4a9eff;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: background-color 0.3s;
        }

        .refresh-button:hover {
            background-color: #4a9eff33;
        }

        .stat-item {
            margin: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .confidence-bar {
            width: 100px;
            height: 8px;
            background: #2d2d2d;
            border-radius: 4px;
            overflow: hidden;
        }

        .confidence-fill {
            height: 100%;
            background: #4a9eff;
            transition: width 0.3s ease;
        }

        .image-preview {
            max-width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 4px;
            margin-top: 10px;
        }

        .outcome-tag {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
        }

        .trend-chart {
            height: 200px;
            margin-top: 15px;
            background-color: #3d3d3d;
            border-radius: 4px;
            padding: 10px;
        }

        .reset-view-btn {
            position: absolute;
            bottom: 20px; /* Change from top to bottom */
            left: 20px;
            z-index: 1000;
            padding: 8px 16px;
            background-color: #2d2d2d;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .reset-view-btn:hover {
            background-color: #3d3d3d;
        }

        .legend {
            margin-top: 10px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .legend-color {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .legend-color.pothole {
            background-color: #17a2b8;
        }

        .legend-color.distressed {
            background-color: #ffc107;
        }

        .outcome-true-positive {
            background-color: #28a745;
        }

        .outcome-false-positive {
            background-color: #dc3545;
        }

        .outcome-true-negative {
            background-color: #17a2b8;
        }

        .outcome-false-negative {
            background-color: #ffc107;
            color: #000;
        }

        .outcome-unknown {
            background-color: #6c757d;
        }

        .loading-indicator {
            display: none;
            margin-left: 10px;
            color: #4a9eff;
        }

        .loading .loading-indicator {
            display: inline;
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <div class="sidebar">
        <h3> City of Chattanooga</h3>
        <div class="stats-container">
            <div class="stats-heading">
                Overview
                <button onclick="fetchPredictionData()" class="refresh-button">
                    ‚Üª
                    <span class="loading-indicator">Loading...</span>
                </button>
            </div>
            <div class="stat-item">
                <span>Last Updated:</span>
                <span id="lastUpdated">Loading...</span>
            </div>
            <div class="stats-heading">Prediction Outcomes</div>
            <div id="outcomeStats">Loading...</div>

            <div class="stat-item">
                <span>Total Predictions:</span>
                <span id="totalPredictions">Loading...</span>
            </div>
            <div class="stat-item">
                <span>confidence interval:</span>
                <span id="ci">Loading...</span>
            </div>

            <div class="stat-item">
                <span>Roadway Score:</span>
                <span id="roadwayScore"> -- not enough data -- </span>
            </div>

        </div>

        <div class="stats-container">
            <div class="stats-heading">Latest Detection</div>
            <div id="latestDetection">Loading...</div>
        </div>

    </div>
    <div class="map-container">
        <button class="reset-view-btn" onclick="resetMapView()">
            üè† Reset View
        </button>
        <div id="map"></div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
<script>
    // Chattanooga, TN coordinates
    const CHATTANOOGA_LAT = 35.0456;
    const CHATTANOOGA_LNG = -85.3097;
    const DEFAULT_ZOOM = 12;

    // Initialize map with Chattanooga center
    const map = L.map('map').setView([CHATTANOOGA_LAT, CHATTANOOGA_LNG], DEFAULT_ZOOM);
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);

    // Create markers group
    const markers = L.layerGroup().addTo(map);

    function resetMapView() {
        map.setView([CHATTANOOGA_LAT, CHATTANOOGA_LNG], DEFAULT_ZOOM);
    }

    const outcomeColors = {
        pothole: '#17a2b8',
        distressed: '#ffc107',
        manhole: '#ff5733',
        utility: '#33ff57',
        grate: '#3357ff'
    };

    function getMarkerColor(results) {
        if (!results || results.length === 0) return '#6c757d'; // gray for unknown

        const highestConfidence = Math.max(...results.map(r => r.confidence));
        const result = results.find(r => r.confidence === highestConfidence);

        // Return color from outcomeColors using the label_id
        return outcomeColors[result.label_id] || '#6c757d';
    }

    function createPopupContent(prediction) {
        const highestConfidence = Math.max(...prediction.properties.prediction_results.map(p => p.confidence));
        return `
        <div style="max-width: 200px">
            <p style="margin: 0 0 8px">${prediction.properties.address}</p>
            <p style="margin: 0">Confidence: ${(highestConfidence * 100).toFixed(1)}%</p>
            <img src="${prediction.properties.image_uri}" alt="Prediction Image" style="width: 100%; margin-top: 10px;">
        </div>
    `;
    }

    function calculateSegmentLength(coordinates) {
        if (!coordinates || coordinates.length < 2) return 0;

        const R = 6371e3; // Earth's radius in meters
        const toRadians = (degrees) => degrees * (Math.PI / 180);

        let totalLength = 0;

        for (let i = 0; i < coordinates.length - 1; i++) {
            const [lat1, lon1] = coordinates[i];
            const [lat2, lon2] = coordinates[i + 1];

            const phi1 = toRadians(lat1);
            const phi2 = toRadians(lat2);
            const deltaPhi = toRadians(lat2 - lat1);
            const deltaLambda = toRadians(lon2 - lon1);

            const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +
                Math.cos(phi1) * Math.cos(phi2) *
                Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            const distance = R * c;
            totalLength += distance;
        }

        return totalLength;
    }

    function calcRoadwayScore(roadSegments) {
        if (!roadSegments || roadSegments.length === 0) return 0;

        let totalFeatures = 0;
        let totalLength = 0;

        roadSegments.forEach(segment => {
            const {features, coordinates} = segment;
            totalFeatures += features.length;
            totalLength += calculateSegmentLength(coordinates);
        });

        const score = (totalFeatures / totalLength) * 100;
        return score.toFixed(2); // Return the score as a percentage with 2 decimal places
    }

    async function fetchPredictionData() {
        try {
            document.querySelector('.refresh-button').classList.add('loading');
            const response = await fetch('/api/potholes');
            const data = await response.json();

            // Clear existing markers
            markers.clearLayers();

            // Filter out duplicates based on location
            const uniqueData = [];
            const seenLocations = new Set();

            data.forEach(prediction => {
                const locationKey = `${prediction.geometry.coordinates[0]},${prediction.geometry.coordinates[1]}`;
                if (!seenLocations.has(locationKey)) {
                    seenLocations.add(locationKey);
                    uniqueData.push(prediction);
                }
            });

            // Update statistics
            updateDashboardStats(uniqueData);

            // Add markers to map
            uniqueData.forEach(prediction => {
                const [lng, lat] = prediction.geometry.coordinates;
                const highestConfidence = Math.max(...prediction.properties.prediction_results.map(p => p.confidence));

                const marker = L.circle([lat, lng], {
                    color: getMarkerColor(prediction.properties.prediction_results),
                    fillColor: getMarkerColor(prediction.properties.prediction_results),
                    fillOpacity: 1,
                    radius: 3
                });

                marker.bindPopup(createPopupContent(prediction));
                markers.addLayer(marker);
            });

            // Add white dot markers for images without predictions
            data.forEach(prediction => {
                if (prediction.properties.prediction_results.length === 0) {
                    const [lng, lat] = prediction.geometry.coordinates;
                    const marker = L.circle([lat, lng], {
                        color: '#ffffff',
                        fillColor: '#ffffff',
                        fillOpacity: 1,
                        radius: 3
                    });

                    marker.bindPopup('<div style="max-width: 200px"><p style="margin: 0 0 8px">No predictions</p></div>');
                    markers.addLayer(marker);
                }
            });

            if (uniqueData.length > 0) {
                const group = L.featureGroup(markers.getLayers());
                map.fitBounds(group.getBounds());
            }

            // Calculate and update roadway score
            const roadSegments = uniqueData.map(prediction => ({
                features: prediction.properties.prediction_results,
                coordinates: prediction.geometry.coordinates
            }));
            const roadwayScore = calcRoadwayScore(roadSegments);
            document.getElementById('roadwayScore').textContent = roadwayScore;

        } catch (error) {
            console.error('Error fetching prediction data:', error);
        } finally {
            document.querySelector('.refresh-button').classList.remove('loading');
        }
    }

    function updateDashboardStats(data) {
        document.getElementById('totalPredictions').textContent = data.reduce((sum, pred) =>
            sum + pred.properties.prediction_results.length, 0);

        const confidences = data.flatMap(pred => pred.properties.prediction_results.map(p => p.confidence));

        // Handle empty confidences array
        if (confidences.length > 0) {
            confidences.sort((a, b) => a - b);
            const medianConfidence = confidences.length % 2 === 0
                ? (confidences[confidences.length / 2 - 1] + confidences[confidences.length / 2]) / 2
                : confidences[Math.floor(confidences.length / 2)];
            document.getElementById('ci').textContent = medianConfidence.toFixed(2);
        } else {
            document.getElementById('ci').textContent = "No data";
        }

        document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

        const outcomes = data.reduce((acc, pred) => {
            pred.properties.prediction_results.forEach(p => {
                acc[p.label_id] = (acc[p.label_id] || 0) + 1;
            });
            return acc;
        }, {});

        const outcomeHTML = Object.entries(outcomes)
            .map(([outcome, count]) => `
        <div class="stat-item">
            <span class="outcome-tag outcome-${outcome}" style="background-color: ${outcomeColors[outcome] || '#6c757d'};">
                ${outcome.replace('_', ' ')}
            </span>
            <span>${count}</span>
        </div>
    `).join('');

        document.getElementById('outcomeStats').innerHTML = outcomeHTML || "No predictions found";

        if (data.length > 0) {
            const latest = data.reduce((prev, current) =>
                new Date(current.created_at) > new Date(prev.created_at) ? current : prev
            );

            const address = latest.properties.address || "Address unknown";
            let streetAddress = address;

            // Safely extract street address if possible
            const addressMatch = address.match(/^\d+\s+\D+/);
            if (addressMatch && addressMatch[0]) {
                streetAddress = addressMatch[0];
            }

            const latestHTML = `
        <div class="stat-item">
            <span>Address:</span>
            <span>${streetAddress}</span>
        </div>`;

            // Only add confidence bar if there are prediction results
            if (latest.properties.prediction_results && latest.properties.prediction_results.length > 0) {
                const maxConfidence = Math.max(...latest.properties.prediction_results.map(p => p.confidence * 100));
                const confidenceBar = `
            <div class="stat-item">
                <span>Confidence:</span>
                <div class="confidence-bar">
                    <div class="confidence-fill" style="width: ${maxConfidence}%"></div>
                </div>
            </div>`;
                document.getElementById('latestDetection').innerHTML = latestHTML + confidenceBar;
            } else {
                document.getElementById('latestDetection').innerHTML = latestHTML +
                    '<div class="stat-item"><span>Confidence:</span><span>No predictions</span></div>';
            }
        } else {
            document.getElementById('latestDetection').innerHTML = "No data available";
        }
    }

    // Initial fetch
    fetchPredictionData();

    // Refresh data every 5 minutes
    setInterval(fetchPredictionData, 300000);
</script>
</body>
</html>