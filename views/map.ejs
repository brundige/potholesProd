<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pothole Detection Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css"/>
    <link rel="stylesheet" href="/css/map.css"/>
</head>
<body>
<div class="dashboard-container">
    <div class="sidebar">
        <div class="stats-container">
            <div class="stats-heading">Dashboard
                <button class="refresh-button" onclick="fetchPredictionData()">
                    <i class="fas fa-sync-alt"></i>
                    <span class="loading-indicator">Loading...</span>
                </button>
            </div>
            <div class="stat-item">
                <span>Total Predictions:</span>
                <span id="totalPredictions">0</span>
            </div>
            <div class="stat-item">
                <span>Confidence Index:</span>
                <span id="ci">0</span>
            </div>
            <div class="stat-item">
                <span>Roadway Score:</span>
                <span id="roadwayScore">0</span>
            </div>
            <div class="stat-item">
                <span>Last Updated:</span>
                <span id="lastUpdated">-</span>
            </div>
        </div>





        <div class="stats-container">
            <div class="stats-heading">Prediction Counts</div>
            <div id="outcomeStats">No predictions found</div>
        </div>

        <div class="stats-container">
            <div class="stats-heading">Map Filters</div>
            <div class="filter-item">
                <label class="toggle-label">
                    <input type="checkbox" id="showNoDetections" checked>
                    <span class="toggle-text">Show Locations Without Detections</span>
                </label>
            </div>
            <div class="stats-heading">Prediction Types</div>
            <div id="predictionTypeFilters">
                <!-- Will be populated dynamically -->
            </div>
        </div>

        <div class="stats-container">
            <div class="stats-heading">Legend</div>
            <div class="legend">
                <div class="legend-item">
                    <span class="legend-color pothole"></span>
                    <span>Pothole</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color distressed"></span>
                    <span>Distressed Road</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background-color: #ffffff;"></span>
                    <span>No Detections</span>
                </div>
            </div>
        </div>
    </div>
    <div class="map-container">
        <div id="map"></div>
        <button class="reset-view-btn" onclick="resetMapView()">
            <i class="fas fa-expand-arrows-alt"></i> Reset View
        </button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script>
    // Initialize map
    const map = L.map('map').setView([35.0456, -85.3097], 13);
    // With this dark theme
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
        subdomains: 'abcd',
        maxZoom: 19
    }).addTo(map);

    // Container for all markers
    const markers = L.layerGroup().addTo(map);

    // Colors for different prediction types
    const outcomeColors = {
        'pothole': '#17a2b8',
        'distressed': '#ffc107',
        'crack': '#dc3545',
        'normal': '#28a745'
    };

    // Add these variables for filtering
    let filterSettings = {
        showNoDetections: true,
        predictionTypes: {}
    };

    // Initialize filters with all types checked by default
    Object.keys(outcomeColors).forEach(type => {
        filterSettings.predictionTypes[type] = true;
    });

    // Create filter UI
    function createFilterUI() {
        const container = document.getElementById('predictionTypeFilters');
        container.innerHTML = '';

        Object.entries(outcomeColors).forEach(([type, color]) => {
            const filterItem = document.createElement('div');
            filterItem.className = 'filter-item';

            filterItem.innerHTML = `
                <label class="toggle-label">
                    <input type="checkbox" data-type="${type}" checked>
                    <span class="color-indicator" style="background-color: ${color}"></span>
                    <span class="toggle-text">${type.charAt(0).toUpperCase() + type.slice(1)}</span>
                </label>
            `;

            container.appendChild(filterItem);

            // Add event listener
            const checkbox = filterItem.querySelector('input');
            checkbox.addEventListener('change', () => {
                filterSettings.predictionTypes[type] = checkbox.checked;
                applyFilters();
            });
        });

        // Add event listener for locations without predictions
        document.getElementById('showNoDetections').addEventListener('change', (e) => {
            filterSettings.showNoDetections = e.target.checked;
            applyFilters();
        });
    }

    // A variable to store the data for filtering
    let uniqueDataCache = [];

    // Apply filters to map
    function applyFilters() {
        markers.clearLayers();

        // Re-add markers based on current filter settings
        uniqueDataCache.forEach(prediction => {
            const [lng, lat] = prediction.geometry.coordinates;

            // Skip if no prediction results and filter is off
            if (prediction.properties.prediction_results.length === 0) {
                if (filterSettings.showNoDetections) {
                    const marker = L.circle([lat, lng], {
                        color: '#ffffff',
                        fillColor: '#ffffff',
                        fillOpacity: 1,
                        radius: 3
                    });
                    marker.bindPopup('<div style="max-width: 200px"><p style="margin: 0 0 8px">No predictions</p></div>');
                    markers.addLayer(marker);
                }
                return;
            }

            // Get the highest confidence prediction
            const highestConfidence = Math.max(...prediction.properties.prediction_results.map(p => p.confidence));
            const result = prediction.properties.prediction_results.find(r => r.confidence === highestConfidence);

            // Skip if prediction type is filtered out
            if (!filterSettings.predictionTypes[result.label_id]) {
                return;
            }

            // Add marker
            const marker = L.circle([lat, lng], {
                color: getMarkerColor(prediction.properties.prediction_results),
                fillColor: getMarkerColor(prediction.properties.prediction_results),
                fillOpacity: 1,
                radius: 3
            });

            marker.bindPopup(createPopupContent(prediction));
            markers.addLayer(marker);
        });
    }

    function resetMapView() {
        if (uniqueDataCache.length > 0) {
            const group = L.featureGroup(markers.getLayers());
            map.fitBounds(group.getBounds());
        }
    }

    function getMarkerColor(results) {
        if (!results || results.length === 0) return '#ffffff';

        const highestConfidence = Math.max(...results.map(p => p.confidence));
        const result = results.find(r => r.confidence === highestConfidence);

        return outcomeColors[result.label_id] || '#6c757d';
    }

    function createPopupContent(prediction) {
        const results = prediction.properties.prediction_results;
        const address = prediction.properties.address || 'Unknown location';

        let content = `<div style="max-width: 200px">
                        <p style="margin: 0 0 8px">${address}</p>`;

        if (results && results.length > 0) {
            content += `<table style="width: 100%; font-size: 0.9em; border-collapse: collapse;">
                        <tr>
                            <th style="text-align: left; border-bottom: 1px solid #ddd; padding: 4px;">Type</th>
                            <th style="text-align: right; border-bottom: 1px solid #ddd; padding: 4px;">Confidence</th>
                        </tr>`;

            results.forEach(result => {
                content += `<tr>
                            <td style="padding: 4px; border-bottom: 1px solid #eee;">${result.label_id}</td>
                            <td style="text-align: right; padding: 4px; border-bottom: 1px solid #eee;">${(result.confidence * 100).toFixed(1)}%</td>
                        </tr>`;
            });

            content += `</table>`;
        } else {
            content += `<p>No predictions for this location</p>`;
        }

        content += `</div>`;
        return content;
    }

    function toRadians(degrees) {
        return degrees * Math.PI / 180;
    }

    function calculateSegmentLength(coordinates) {
        if (!coordinates || coordinates.length < 2) return 0;

        const R = 6371; // Radius of the Earth in km
        let totalLength = 0;

        for (let i = 0; i < coordinates.length - 1; i++) {
            const [lat1, lon1] = coordinates[i];
            const [lat2, lon2] = coordinates[i + 1];

            const phi1 = toRadians(lat1);
            const phi2 = toRadians(lat2);
            const deltaPhi = toRadians(lat2 - lat1);
            const deltaLambda = toRadians(lon2 - lon1);

            const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +
                Math.cos(phi1) * Math.cos(phi2) *
                Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            const distance = R * c;
            totalLength += distance;
        }

        return totalLength;
    }

    function calcRoadwayScore(roadSegments) {
        if (!roadSegments || roadSegments.length === 0) return 0;

        let totalFeatures = 0;
        let totalLength = 0;

        roadSegments.forEach(segment => {
            const {features, coordinates} = segment;
            totalFeatures += features.length;
            totalLength += calculateSegmentLength(coordinates);
        });

        const score = (totalFeatures / totalLength) * 100;
        return score.toFixed(2); // Return the score as a percentage with 2 decimal places
    }

    async function fetchPredictionData() {
        try {
            document.querySelector('.refresh-button').classList.add('loading');
            const response = await fetch('/api/potholes');
            const data = await response.json();

            // Clear existing markers
            markers.clearLayers();

            // Filter out duplicates based on location
            uniqueDataCache = [];
            const seenLocations = new Set();

            data.forEach(prediction => {
                const locationKey = `${prediction.geometry.coordinates[0]},${prediction.geometry.coordinates[1]}`;
                if (!seenLocations.has(locationKey)) {
                    seenLocations.add(locationKey);
                    uniqueDataCache.push(prediction);
                }
            });

            // Update statistics
            updateDashboardStats(uniqueDataCache);

            // Apply filters to the map
            applyFilters();

            if (uniqueDataCache.length > 0) {
                const group = L.featureGroup(markers.getLayers());
                map.fitBounds(group.getBounds());
            }

            // Calculate and update roadway score
            const roadSegments = uniqueDataCache.map(prediction => ({
                features: prediction.properties.prediction_results,
                coordinates: prediction.geometry.coordinates
            }));
            const roadwayScore = calcRoadwayScore(roadSegments);
            document.getElementById('roadwayScore').textContent = roadwayScore;

        } catch (error) {
            console.error('Error fetching prediction data:', error);
        } finally {
            document.querySelector('.refresh-button').classList.remove('loading');
        }
    }

    function updateDashboardStats(data) {
        document.getElementById('totalPredictions').textContent = data.reduce((sum, pred) =>
            sum + pred.properties.prediction_results.length, 0);

        const confidences = data.flatMap(pred => pred.properties.prediction_results.map(p => p.confidence));

        // Handle empty confidences array
        if (confidences.length > 0) {
            confidences.sort((a, b) => a - b);
            const medianConfidence = confidences.length % 2 === 0
                ? (confidences[confidences.length / 2 - 1] + confidences[confidences.length / 2]) / 2
                : confidences[Math.floor(confidences.length / 2)];
            document.getElementById('ci').textContent = medianConfidence.toFixed(2);
        } else {
            document.getElementById('ci').textContent = "No data";
        }

        document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

        const outcomes = data.reduce((acc, pred) => {
            pred.properties.prediction_results.forEach(p => {
                acc[p.label_id] = (acc[p.label_id] || 0) + 1;
            });
            return acc;
        }, {});

        const outcomeHTML = Object.entries(outcomes)
            .map(([outcome, count]) => `
        <div class="stat-item">
            <span class="outcome-tag outcome-${outcome}" style="background-color: ${outcomeColors[outcome] || '#6c757d'};">
                ${outcome.replace('_', ' ')}
            </span>
            <span>${count}</span>
        </div>
    `).join('');

        document.getElementById('outcomeStats').innerHTML = outcomeHTML || "No predictions found";

        if (data.length > 0) {
            const latest = data.reduce((prev, current) =>
                new Date(current.created_at) > new Date(prev.created_at) ? current : prev
            );

            const address = latest.properties.address || "Address unknown";
            let streetAddress = address;

            // Safely extract street address if possible
            const addressMatch = address.match(/^\d+\s+\D+/);
            if (addressMatch && addressMatch[0]) {
                streetAddress = addressMatch[0];
            }

            const latestHTML = `
            <div class="stat-item left-align">
                <span>Address:</span>
                <span>${streetAddress}</span>
            </div>`;


            // Only add confidence bar if there are prediction results
            if (latest.properties.prediction_results && latest.properties.prediction_results.length > 0) {
                const maxConfidence = Math.max(...latest.properties.prediction_results.map(p => p.confidence * 100));
                const confidenceBar = `
            <div class="stat-item">
                <span>Confidence:</span>
                <div class="confidence-bar">
                    <div class="confidence-fill" style="width: ${maxConfidence}%"></div>
                </div>
            </div>`;
                document.getElementById('latestDetection').innerHTML = latestHTML + confidenceBar;
            } else {
                document.getElementById('latestDetection').innerHTML = latestHTML +
                    '<div class="stat-item"><span>Confidence:</span><span>No predictions</span></div>';
            }
        } else {
            document.getElementById('latestDetection').innerHTML = "No data available";
        }
    }

    // Initialize filters and fetch data
    document.addEventListener('DOMContentLoaded', () => {
        createFilterUI();
        fetchPredictionData();
    });

    // Refresh data every 5 minutes
    setInterval(fetchPredictionData, 300000);
</script>
</body>
</html>